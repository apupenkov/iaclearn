package book.chapter10;

public class StreamInputOutputUtil {

    /*
    * Вариант A
    * */

    /*
    * [1]
    * В каждой строке найти и удалить заданную подстроку
    * */

    /*
    * [2]
    * В каждой строке стихотворения найти и заменить заданную подстроку на подстроку иной длины.
    * */

    /*
    * [3]
    * В каждой строке найти слова, начинающиеся с гласной буквы.
    * */

    /*
    * [4]
    * Найти и вывести слова текста, для которых последняя буква одного слова совпадает с первой буквой следующего слова.
    * */

    /*
    * [5]
    * Найти в строке наибольшее число цифр, следующих подряд.
    * */

    /*
    * [6]
    * В каждой строке стихотворения Максима Богдановича подсчитать частоту повторяемости каждого слова из заданного
    * списка и вывести эти слова в порядке возрастания частоты повторяемости.
    * */

    /*
    * [7]
    * В каждом слове повести Владимира Короткевича «Дикая охота короля Стаха» заменить первую букву слова на прописную.
    * */

    /*
    * [8]
    * Определить частоту повторяемости букв и слов в стихотворении Адама Мицкевича.
    * */



    /*
    * Вариант B
    * */



    /*
    * Вариант C
    * */

    /*
    * [1]
    * Создать и заполнить файл случайными целыми числами. Отсортировать содержимое файла по возрастанию.
    * */

    /*
    * [2]
    * Прочитать текст Java-программы и все слова public в объявлении атрибутов и методов класса заменить на слово private.
    * */

    /*
    * [3]
    * Прочитать текст Java-программы и записать в другой файл в обратном порядке символы каждой строки.
    * */

    /*
    * [4]
    * Прочитать текст Java-программы и в каждом слове длиннее двух символов все строчные символы заменить прописными
    * */

    /*
    * [5]
    * В файле, содержащем фамилии студентов и их оценки, записать прописными буквами фамилии тех студентов, которые
    * имеют средний балл более 7.
    * */

    /*
    * [6]
    * Файл содержит символы, слова, целые числа и числа с плавающей запятой. Определить все данные, тип которых
    * вводится из командной строки.
    * */

    /*
    * [7]
    * Из файла удалить все слова, содержащие от трех до пяти символов, но при этом из каждой строки должно быть удалено
    * только максимальное четное количество таких слов.
    * */

    /*
    * [8]
    * Прочитать текст Java-программы и удалить из него все лишние пробелы и табуляции, оставив только необходимые
    * для разделения операторов.
    * */

    /*
    * [9]
    * Прочитать строки из файла и поменять местами первое и последнее слова в каждой строке.
    * */

    /*
    * [10]
    * Ввести из текстового файла, связанного с входным потоком, последовательность строк. Выбрать и сохранить m
    * последних слов в каждой из последних n строк.
    * */

    /*
    * [11]
    * Ввести из текстового файла, связанного с входным потоком, последовательность строк. Выбрать и сохранить m
    * последних слов в каждой из последних n строк.
    * */

    /*
    * [12]
    * Из текстового файла ввести последовательность строк. Выделить отдельные слова, разделяемые пробелами. Написать
    * метод поиска слова по образцу-шаблону. Вывести найденное слово в другой файл.
    * */

    /*
    * [13]
    * Входной файл содержит совокупность строк. Строка файла содержит строку квадратной матрицы. Ввести матрицу в
    * двумерный массив (размер матрицы найти). Вывести исходную матрицу и результат ее транспонирования
    * */

    /*
    * [14]
    * Входной файл хранит квадратную матрицу по принципу: строка представляет собой число. Определить размерность.
    * Построить двумерный массив, содержащий матрицу. Вывести исходную матрицу и результат ее поворота на 90˚
    * по часовой стрелке.
    * */

    /*
    * [15]
    * В файле содержится совокупность строк. Найти номера строк, совпадающих с заданной строкой. Имя файла и строка
    * для поиска — аргументы командной строки. Вывести строки файла и номера строк, совпадающих с заданной.
    * */
}
